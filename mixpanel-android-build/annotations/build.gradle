apply plugin: 'java'
apply plugin: 'maven'
apply plugin: 'signing'

sourceCompatibility = 1.7
targetCompatibility = 1.7

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives sourcesJar
    archives javadocJar
}

def isReleaseVersion() {
    return !version.endsWith("SNAPSHOT");
}

if (isReleaseVersion()) {
    signing {
        required { gradle.taskGraph.hasTask("uploadArchives") }
        sign configurations.archives
    }
}

uploadArchives {
    configuration = configurations.archives

    repositories.mavenDeployer {
        pom.project {
            name project.name
            description 'Annotations for the Mixpanel library for Android \n' +
                    'http://mixpanel.com/android-analytics/'
            url 'https://github.com/mixpanel/mixpanel-android'
            scm {
                url 'http://github.com/mixpanel/mixpanel-android-build'
                connection 'scm:git:http://github.com/mixpanel/mixpanel-android-build'
                developerConnection 'scm:git:git@github.com:mixpanel/mixpanel-android-build.git'
            }
            licenses {
                license {
                    name 'The Apache Software License, Version 2.0'
                    url 'http://www.apache.org/license/LICENSE-2.0.txt'
                    distribution 'repo'
                }
            }
            developers {
                developer {
                    id 'mixpanel_dev'
                    name 'Mixpanel Developers'
                    email 'dev@mixpanel.com'
                }
            }
        }

        if (isReleaseVersion() && project.hasProperty("sonatypeUsername")) {
            /**
             * In order to do nexus deploys, you'll need to setup a gradle.properties file in $HOME/.gradle
             * with the following properties. You'll need the mixpanel.key file and then import it using GnuPG
             * which will provide you with the keyId and the secring.gpg file
             * signing.keyId=
             * signing.password=
             * signing.secretKeyRingFile=
             *
             * sonatypeRepo=https://oss.sonatype.org/service/local/staging/deploy/maven2/
             * sonatypeUsername=
             * sonatypePassword=
             */

            beforeDeployment {
                MavenDeployment deployment -> signing.signPom(deployment)
            }
            repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
                authentication(userName: sonatypeUsername, password: sonatypePassword)
            }
        } else {
            repository(url: 'file://' + new File(System.getProperty('user.home'), '.m2/repository').absolutePath)
        }
    }
}
